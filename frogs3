#include <stdio.h>
#include <conio.h>
#include <float.h>

#include <assert.h>
#include <math.h>

enum NumOfRoots
{
    SS_NO_ROOTS,
    SS_ONE_ROOTS,
    SS_TWO_ROOTS,
    SS_INF_ROOTS
};

int SolveEquation (double a, double b, double c,
                 double* x1, double* x2);
int SolveLinear (double b, double c,
                 double* x1);
int SolveSquare (double a, double b, double c,
                 double* x1, double* x2);
int PrintRoots(double *x1, double *x2);
int ClearBuffer ();

int InputNumbers (double *a, double *b, double *c);

int main (void)
{
    printf ("enter coeff\n");

    double a = 0, b = 0, c = 0;
    printf ("a, b, c =\n");

    InputNumbers (&a, &b, &c);

    double x1 = 0, x2 = 0;
    int nRoots = SolveEquation (a, b, c, &x1, &x2);

    // PrintRoots()
    switch (nRoots)
        {
        case SS_ONE_ROOTS: printf ("x = %lg\n", x1);
                break;
        case 2: printf ("x1 = %lg  x2= %lg\n",x1 ,x2);
                break;
        case SS_INF_ROOTS: printf ("inf");
                break;
        case SS_NO_ROOTS :printf ("sol is not");
                break;
        // default: ??
        }

}

//---------------------------------------------
//!
//!
//!
//!
//!
//!
//!
//!
//---------------------------------------------
int SolveEquation (double a, double b, double c,
                 double* x1, double* x2)
{
    assert (x1 != NULL);
    assert (x2 != NULL);
    assert (x1 != x2);

    if (a == 0)
        {
        return SolveLinear (b, c, x1);
        }
    else if (a != 0)
        {
        return SolveSquare (a, b, c, x1, x2);
        }

}

int InputNumbers (double* a, double* b, double* c)
{
    assert (a != NULL);
    assert (b != NULL);
    assert (c != NULL);
    while (scanf ("%lg %lg %lg", a, b, c) < 3)
        {
        ClearBuffer ();
        printf ("enter right numbers \n");
        }
    if (!isfinite (*a) || !isfinite (*b) || !isfinite (*c))
        {
        printf ("enter right numbers \n");
        InputNumbers (a, b, c);
        }

}

int ClearBuffer ()
{
    char ch;
    while ((ch = getchar ()) != '\n')
        {
        continue;
        }

}
int SolveLinear (double b, double c, double* x1)
{
    assert (x1 != NULL);
    if (fabs(b) < DBL_EPSILON)
        {
            if (fabs(c) > DBL_EPSILON)
                {
                return SS_NO_ROOTS;
                }
            else if (fabs(c) < DBL_EPSILON)
                {
                return SS_INF_ROOTS;
                }
        }
    else if (fabs(b) > DBL_EPSILON)
        {
        // SolveLinearRoot()
         *x1 = -c / b;
        return SS_ONE_ROOTS;
        }
}


int SolveSquare (double a, double b, double c,
                 double* x1, double* x2)
{
    assert (x1 != NULL);
    assert (x2 != NULL);
    // SolveDiscriminant
    double d = b * b - 4 * a * c;
    if (fabs(d) < DBL_EPSILON)
        {
        *x1 = *x2 = -b / (2 * a);
        return SS_ONE_ROOTS;
        }
    else if (d > DBL_EPSILON)
        {
        // SolveSquareRoots(a, b, c, x1, x2)
        *x1 = (-b + sqrt(d)) / (2 * a);
        *x2 = (-b - sqrt(d)) / (2 * a);
        return SS_TWO_ROOTS;
        }
    else if (d < - DBL_EPSILON)
        {
        return SS_NO_ROOTS;
        }
}


// Почитать варианты как сравнивать вещественные числа
// Написать функцию isZero(double x) isEqual(double x, double y)
